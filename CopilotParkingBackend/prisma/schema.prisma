// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id              String      @id @default(uuid())
  email           String      @unique
  firstName       String
  lastName        String
  organizedEvents Event[]     // Relation to events organized by this user
  participatingIn Event[]     @relation("EventParticipants")
  eventUsers      EventUser[]
  createdAt       DateTime    @default(now())
}

model Event {
  id              String      @id @default(uuid())
  meetingTime     DateTime
  meetingBuilding String
  organizer       User        @relation(fields: [organizerId], references: [id])
  organizerId     String
  participants    User[]      @relation("EventParticipants")
  eventUsers      EventUser[]
  createdAt       DateTime    @default(now())
}

model Conversation {
  id              String    @id @default(uuid())
  conversationId  String    // to group chats
  eventUser       EventUser @relation(fields: [eventUserId], references: [id])
  eventUserId     String
  sender          String    // 'user' or 'bot'
  message         String
  mediaUrl        String?
  specialNotes    String?
  createdAt       DateTime  @default(now())
}

model EventUser {
  id             String         @id @default(uuid())
  event          Event          @relation(fields: [eventId], references: [id])
  eventId        String
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  activationCode String         @unique
  parkingSpot    String?        @unique
  conversations  Conversation[]

  @@unique([eventId, userId])
}

model Map {
  id               String  @id @default(uuid())
  mapNickname      String  @unique
  mediaUrl         String  // URL for map image
  floorNumber      Int
  areaType         String  // e.g., 'visitor', 'accessibility', 'ev' etc.
  assignedEntrance String  // entrance point reference
  targetBuilding   String  // destination building reference
  
  @@index([targetBuilding, assignedEntrance]) // Index for quick lookups in recommendation system
}

